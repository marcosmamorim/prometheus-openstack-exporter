#!/usr/bin/env python
"""
OpenStack exporter for the prometheus monitoring system

Copyright (C) 2016-2019 Canonical, Ltd.
Authors:
  Jacek Nykis <jacek.nykis@canonical.com>
  Laurent Sesques <laurent.sesques@canonical.com>
  Paul Collins <paul.collins@canonical.com>
  Marcos Amorim <mamorim@redhat.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3,
as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranties of
MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

# TODO: Remove config['cache_file'] and use config['cache_dir'] instead

import argparse
import yaml
import json
import ast
from os import environ as env
from os import rename, path
import traceback
import urlparse
from threading import Thread
import pickle
import requests
from time import sleep, time
from BaseHTTPServer import BaseHTTPRequestHandler
from BaseHTTPServer import HTTPServer
from SocketServer import ForkingMixIn
from prometheus_client import CollectorRegistry, generate_latest, Gauge, CONTENT_TYPE_LATEST
from netaddr import IPRange
import random
from openstack import connection
import openstack.config
import os_client_config
import os
import swift.common.utils
from swift.common.ring.ring import Ring

import logging
import logging.handlers

config = None
connection_time = {}
log = logging.getLogger('poe-logger')


def get_clients(cloud):
    try:
        nova = os_client_config.make_client('compute', cloud=cloud)
        heat = os_client_config.make_client('orchestration', cloud=cloud)
        cinder = os_client_config.make_client('volume', cloud=cloud)
        cinder_rest = os_client_config.make_rest_client('volume', cloud=cloud)
        neutron = os_client_config.make_client('network', cloud=cloud)
        config = openstack.config.get_cloud_region(cloud=cloud)
        conn = connection.Connection(config=config)
        return conn, nova, cinder, neutron, cinder_rest, heat
    except Exception as e:
        log.error("Error connecting to cloud {0}: {1}". format(cloud, e))


def get_clouds(config_dir='/etc/openstack-exporter'):
    if os.path.exists(config_dir+'/clouds.yaml'):
        cloud_file = config_dir+'/clouds.yaml'
        with open(cloud_file, 'r') as file:
            clouds = yaml.load(file, Loader=yaml.FullLoader)
        cloud_conn = []
        for cloud in clouds['clouds']:
            log.debug("Loading cloud: %s" % cloud)
            cloud_conn.append(cloud)
        return cloud_conn
    else:
        return None

class DataGatherer(Thread):
    """Periodically retrieve data from openstack in a separate thread,
    save as pickle to cache_file
    """
    # TODO: Create stats with time to get information from OpenStack for each module
    def __init__(self, cloud):
        Thread.__init__(self)
        self.daemon = True
        self.duration = 0
        self.refresh_interval = config.get('cache_refresh_interval', 900)
        self.cloud = cloud
        self.cache_file = config['cache_file'] + '-' + self.cloud
        self.use_nova_volumes = config.get('use_nova_volumes', True)

    def _get_keystone_info(self, conn):
        log.debug("_get_keystone_info")
        info = {}
        info['tenants'] = [dict(x) for x in conn.identity.projects()]
        return info

    def _get_heat_info(self, conn, heat):
        info = {}
        info['stacks'] = [dict(x) for x in conn.list_stacks()]
        info['heat_services'] = [dict(x.to_dict()) for x in heat.services.list()]
        return info

    def _get_neutron_info(self, conn):
        info = {}
        info['floatingips'] = [dict(ip) for ip in conn.network.ips()]
        info['networks'] = [dict(network) for network in conn.network.networks()]
        info['ports'] = [dict(port) for port in conn.network.ports()]
        info['routers'] = [dict(router) for router in conn.network.routers()]
        info['subnets'] = [dict(subnet) for subnet in conn.network.subnets()]
        info['network_services'] = [dict(service) for service in conn.network.agents()]
        return info

    def _get_metadata_info(self, prodstack):
        m_labels = config.get('instance_metadata', ['project', 'course_name', 'env_type', 'platform', 'Purpose', 'Project', 'catalog_item'])
        info = {}
        info['metadata'] = {}
        for i in prodstack['instances']:
            t_id = i['project_id']
            meta = dict(i['metadata'])
            info['metadata'][t_id] = {}
            for label in m_labels:
                # if label metadata not found set label to untagged
                if label in meta:
                    info['metadata'][t_id][label] = meta[label]
                else:
                    info['metadata'][t_id][label] = 'untagged'
        return info

    def _get_nova_info(self, conn, prodstack, nova, cinder, neutron, cinder_rest):
        info = {}
        info['hypervisors'] = [dict(hypervisor) for hypervisor in conn.list_hypervisors()]
        info['services'] = [dict(service) for service in conn.compute.services()]
        r_volume_services = cinder_rest.get('/os-services')
        info['volume_services'] = r_volume_services.json()['services']
        info['flavors'] = [dict(flavor) for flavor in conn.list_flavors()]
        info['aggregates'] = [dict(aggregate) for aggregate in conn.list_aggregates()]

        info['instances'] = []
        valid_statuses = ['ACTIVE', 'ERROR', 'SHELVED_OFFLOADED', 'SHUTOFF', 'SUSPENDED', 'VERIFY_RESIZE']
        for status in valid_statuses:
            marker = ''
            while True:
                search_opts = {'limit': '100', 'marker': marker, 'status': status}
                # search_opts = {'status': status}
                new_instances = [dict(instance) for instance in conn.list_servers(detailed=True, all_projects=True, bare=True, filters=search_opts)]
                if new_instances:
                    marker = new_instances[-1]['id']
                    info['instances'].extend(new_instances)
                else:
                    break
        info['volume_quotas'] = {}
        info['nova_quotas'] = {}
        for t in prodstack['tenants']:
            tid = t['id']
            if self.use_nova_volumes:
                info['volume_quotas'][tid] = cinder.quotas.get(tid, usage=True)._info
            # old OS versions (e.g. Mitaka) will 404 if we request details
            try:
                info['nova_quotas'][tid] = nova.quotas.get(tid, detail=True)._info
            except Exception:
                info['nova_quotas'][tid] = nova.quotas.get(tid)._info
        return info

    def run(self):
        log.debug("Starting data gather thread for %s" % self.cloud)
        prodstack = {}
        self.cache_file = config['cache_file'] + "-" + self.cloud

        base_dir = os.path.dirname(self.cache_file)
        if not os.path.exists(base_dir):
            try:
                os.makedirs(base_dir)
            except Exception as e:
                log.error("Error making directory: {0}: {1}".format(base_dir, e))

        while True:
            start_time = time()
            try:
                conn, nova, cinder, neutron, cinder_rest, heat = get_clients(self.cloud)
                if conn is not None:
                    prodstack.update(self._get_keystone_info(conn))
                    prodstack.update(self._get_neutron_info(conn))
                    log.debug("Starting collect heat stack metrics")
                    prodstack.update(self._get_heat_info(conn, heat))
                    if nova is not None and cinder is not None and neutron is not None:
                        prodstack.update(self._get_nova_info(conn, prodstack, nova, cinder, neutron, cinder_rest))
                        prodstack.update(self._get_metadata_info(prodstack))
                    else:
                        log.error("Error connecting Nova: {0}, Cinder: {1}, Neutron: {2}".format(nova, cinder,
                                                                                                 neutron))
            except Exception as e:
                log.error("Error getting stats: {}".format(e))
            else:
                with open(self.cache_file + '.new', "wb+") as f:
                    pickle.dump((prodstack, ), f, pickle.HIGHEST_PROTOCOL)
                rename(self.cache_file + '.new', self.cache_file)
                log.debug("Done dumping stats to {}".format(self.cache_file))
            self.duration = time() - start_time
            sleep(self.refresh_interval)

    def get_stats(self):
        registry = CollectorRegistry()
        labels = ['cloud']
        age = Gauge('openstack_exporter_cache_age_seconds',
                    'Cache age in seconds. It can reset more frequently '
                    'than scraping interval so we use Gauge',
                    labels, registry=registry)
        label_values = [self.cloud]
        age.labels(*label_values).set(time() - path.getmtime(self.cache_file))
        duration = Gauge('openstack_exporter_cache_refresh_duration_seconds',
                         'Cache refresh duration in seconds.',
                         labels, registry=registry)
        duration.labels(*label_values).set(self.duration)
        return generate_latest(registry)


class Neutron():
    def __init__(self, cloud):
        self.registry = CollectorRegistry()
        self.prodstack = {}
        self.cloud = cloud
        with open(config['cache_file']+'-'+self.cloud, 'rb') as f:
            self.prodstack = pickle.load(f)[0]

        self.tenant_map = {t['id']: t['name'] for t in self.prodstack['tenants']}
        self.network_map = {n['id']: n['name'] for n in self.prodstack['networks']}
        self.subnet_map = {
            n['id']: {'name': n['name'], 'pool': n['allocation_pools']} for n in self.prodstack['subnets']}
        self.routers = self.prodstack['routers']
        self.ports = self.prodstack['ports']
        self.floating_ips = self.prodstack['floatingips']

    def _get_router_ip(self, uuid):
        owner = "network:router_gateway"
        for port in self.ports:
            if port["device_id"] == uuid and port["device_owner"] == owner:
                if port["status"] == "ACTIVE" and port["fixed_ips"]:
                    return port["fixed_ips"][0]["ip_address"]

    def get_floating_ips(self):
        ips = {}
        for ip in self.floating_ips:
            subnet = self.network_map[ip['floating_network_id']]
            try:
                tenant = self.tenant_map[ip['project_id']]
            except KeyError:
                tenant = 'Unknown tenant ({})'.format(ip['project_id'])
            key = (self.cloud, subnet, tenant, 'floatingip', ip['status'])
            if key in ips:
                ips[key] += 1
            else:
                ips[key] = 1
        return ips

    def get_router_ips(self):
        ips = {}
        for r in self.routers:
            if self._get_router_ip(r['id']):
                if r['project_id'].startswith('<Tenant {'):
                    r['project_id'] = ast.literal_eval(r['project_id'][8:-1])['id']
                try:
                    tenant = self.tenant_map[r['project_id']]
                except KeyError:
                    tenant = 'Unknown tenant ({})'.format(r['project_id'])
                subnet = self.network_map[r['external_gateway_info']['network_id']]
                key = (self.cloud, subnet, tenant, 'routerip', r['status'])
                if key in ips:
                    ips[key] += 1
                else:
                    ips[key] = 1
        return ips

    def gen_subnet_size(self):
        labels = ['cloud', 'network_name', 'router_external']
        net_size = Gauge('neutron_net_size',
                         'Neutron networks size',
                         labels, registry=self.registry)
        for n in self.prodstack['networks']:
            size = 0
            for subnet in n['subnet_ids']:
                for pool in self.subnet_map[subnet]['pool']:
                    if ':' in pool['start']:
                        # Skip IPv6 address pools; they are big enough to
                        # drown the IPv4 numbers we might care about.
                        continue
                    size += IPRange(pool['start'], pool['end']).size
            label_values = [self.cloud, self.network_map[n['id']], n['is_router_external']]
            net_size.labels(*label_values).set(size)

    # TODO: Create metrics for number of ports created
    def gen_port_stats(self):
        # #cloud, port_id, , project_id, status,is_admin_state_up
        # labels = ['cloud', 'project_id', 'name', 'port_id', 'status', 'is_admin_state_up']
        # ports = Gauge('network_port_status',
        #               "Neutron network ports",
        #               labels, registry=self.registry)
        #
        # for port in self.ports:
        #     ports.labels(self.cloud, port['project_id'], port['name'], port['status'],)
        #     log.debug("PORTS: %s" % json.dumps(port, indent=2))
        pass

    # TODO: Create metrics for number of routers created
    def gen_router_stats(self):
        pass

    def gen_service_status(self):
        state_labels = ['cloud', 'hostname', 'service', 'state']
        status_labels = ['cloud', 'hostname', 'service', 'status']
        svc_state = Gauge('openstack_network_service_state', 'OpenStack Network Service state', state_labels, registry=self.registry)
        svc_status = Gauge('openstack_network_service_status', 'OpenStack Network Service status', status_labels, registry=self.registry)

        def squashup(val):
            if val:
                return 0
            return 1

        for s in self.prodstack['network_services']:
            host = s['host']
            svc_state.labels(self.cloud, host, s['binary'], s['is_admin_state_up']).set(squashup(s['is_admin_state_up']))
            svc_status.labels(self.cloud, host, s['binary'], s['is_alive']).set(squashup(s['is_alive']))


    def get_stats(self, cloud):
        labels = ['cloud', 'subnet_name', 'tenant', 'ip_type', 'ip_status']
        self.cloud = cloud
        ips = self.get_floating_ips()
        ips.update(self.get_router_ips())
        self.gen_port_stats()
        self.gen_router_stats()
        metrics = Gauge('neutron_public_ip_usage',
                        'Neutron floating IP and router IP usage statistics',
                        labels, registry=self.registry)
        for k, v in ips.items():
            metrics.labels(*k).set(v)
        self.gen_subnet_size()
        self.gen_service_status()
        return generate_latest(self.registry)


class Cinder():
    def __init__(self, cloud):
        self.registry = CollectorRegistry()
        self.prodstack = {}
        self.cloud = cloud
        log.debug("Get stats from cloud %s" % self.cloud)
        with open(config['cache_file']+'-'+self.cloud, 'rb') as f:
            self.prodstack = pickle.load(f)[0]
        self.tenant_map = {t['id']: t['name'] for t in self.prodstack['tenants']}
        self.use_nova_volumes = config.get('use_nova_volumes', True)

    def gen_volume_quota_stats(self):
        # TODO: Modify here to create a single metric for all returned limits and use labels for each metric
        # eg: cinder_quota_volumes{tenant=tenant_id, type_quota={volumes,gigabytes,snapshots,
        # type={limit, in_use, reserved}
        gbs = Gauge('cinder_quota_volume_disk_gigabytes',
                    'Cinder volume metric (GB)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        vol = Gauge('cinder_quota_volume_disks',
                    'Cinder volume metric (number of volumes)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        sna = Gauge('cinder_quota_volume_snapshots',
                    'Cinder snapshots metric (number of snapshots)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        bgbs = Gauge('cinder_quota_volume_backups_gb',
                    'Cinder backup metric (GB)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        bkp = Gauge('cinder_quota_volume_backups',
                    'Cinder backup metric (number of backups)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        grp = Gauge('cinder_quota_volume_groups',
                    'Cinder group metric (number of groups)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        if not self.use_nova_volumes:
            return

        for t, q in self.prodstack['volume_quotas'].items():
            if t in self.tenant_map:
                tenant = self.tenant_map[t]
            else:
                tenant = 'orphaned'
            for tt in ['limit', 'in_use', 'reserved']:
                gbs.labels(self.cloud, tenant, tt).inc(q['gigabytes'][tt])
                vol.labels(self.cloud, tenant, tt).inc(q['volumes'][tt])
                sna.labels(self.cloud, tenant, tt).inc(q['snapshots'][tt])
                bgbs.labels(self.cloud, tenant, tt).inc(q['backup_gigabytes'][tt])
                bkp.labels(self.cloud, tenant, tt).inc(q['backups'][tt])
                grp.labels(self.cloud, tenant, tt).inc(q['groups'][tt])

    def gen_service_status(self):
        state_labels = ['cloud', 'hostname', 'service', 'state', 'zone']
        status_labels = ['cloud', 'hostname', 'service', 'status', 'zone']
        svc_state = Gauge('openstack_volume_service_state', 'OpenStack Volume Service state', state_labels, registry=self.registry)
        svc_status = Gauge('openstack_volume_service_status', 'OpenStack Volume Service status', status_labels, registry=self.registry)

        def squashup(val):
            if val == "up" or val == "enabled":
                return 0
            return 1

        for s in self.prodstack['volume_services']:
            host = s['host']
            svc_state.labels(self.cloud, host, s['binary'], s['state'], s['zone']).set(squashup(s['state']))
            svc_status.labels(self.cloud, host, s['binary'], s['status'], s['zone']).set(squashup(s['status']))


    def get_stats(self, cloud):
        self.gen_volume_quota_stats()
        self.gen_service_status()
        return generate_latest(self.registry)


class Heat():
    def __init__(self, cloud):
        self.registry = CollectorRegistry()
        self.prodstack = {}
        self.cloud = cloud
        log.debug("Get stats from cloud %s" % self.cloud)
        with open(config['cache_file']+'-'+self.cloud, 'rb') as f:
            self.prodstack = pickle.load(f)[0]
        log.debug(json.dumps(self.prodstack, indent=2))
        # self.tenant_map = {t['id']: t['name'] for t in self.prodstack['tenants']}

    def gen_heat_stats(self):
        stack = Gauge('openstack_heat_stack_count',
                    'Heat Stack details',
                    ['cloud', 'project', 'id', 'status', 'action', 'stack_name'], registry=self.registry)

        for t in self.prodstack['stacks']:
            stack.labels(self.cloud, t['properties']['project'], t['id'], t['status'], t['action'], t['name']).inc(1)

    def gen_service_status(self):
        status_labels = ['cloud', 'hostname', 'service', 'status', 'topic']
        svc_status = Gauge('openstack_heat_service_status', 'OpenStack Orchestration Service status', status_labels, registry=self.registry)

        def squashup(val):
            if val == 'up':
                return 0
            return 1

        for s in self.prodstack['heat_services']:
            svc_status.labels(self.cloud, s['host'], s['binary'], s['status'], s['topic']).set(squashup(s['status']))

    def get_stats(self, cloud):
        log.debug("Loading heat gen stats")
        self.gen_heat_stats()
        self.gen_service_status()
        return generate_latest(self.registry)


class Nova():
    def __init__(self, cloud):
        self.registry = CollectorRegistry()
        self.prodstack = {}
        self.cloud = cloud
        with open(config['cache_file']+'-'+self.cloud, 'rb') as f:
            self.prodstack = pickle.load(f)[0]

        self.hypervisors = self.prodstack['hypervisors']
        self.tenant_map = {t['id']: t['name'] for t in self.prodstack['tenants']}
        self.flavor_map = {f['id']: {'ram': f['ram'], 'disk': f['disk'], 'vcpus': f['vcpus']}
                           for f in self.prodstack['flavors']}
        self.aggregate_map = {}
        self.services_map = {}
        for s in self.prodstack['services']:
            if s['binary'] == 'nova-compute':
                self.services_map[s['host']] = s['status']
        for agg in self.prodstack['aggregates']:
            self.aggregate_map.update({i: agg['name'] for i in agg['hosts']})

    def _get_schedulable_instances(self, host):
        free_vcpus = host['vcpus'] * config['openstack_allocation_ratio_vcpu'] - host['vcpus_used']
        free_ram_mbs = host['memory_mb'] * config['openstack_allocation_ratio_ram'] - host['memory_mb_used']
        free_disk_gbs = host['local_gb'] * config['openstack_allocation_ratio_disk'] - host['local_gb_used']
        s = config['schedulable_instance_size']
        return min(int(free_vcpus / s['vcpu']),
                   int(free_ram_mbs / s['ram_mbs']),
                   int(free_disk_gbs / s['disk_gbs']))

    def _get_schedulable_instances_capacity(self, host):
        capacity_vcpus = host['vcpus'] * config['openstack_allocation_ratio_vcpu']
        capacity_ram_mbs = host['memory_mb'] * config['openstack_allocation_ratio_ram']
        capacity_disk_gbs = host['local_gb'] * config['openstack_allocation_ratio_disk']
        s = config['schedulable_instance_size']
        return min(int(capacity_vcpus / s['vcpu']),
                   int(capacity_ram_mbs / s['ram_mbs']),
                   int(capacity_disk_gbs / s['disk_gbs']))

    def gen_hypervisor_stats(self):
        labels = ['cloud', 'hypervisor_hostname', 'aggregate', 'nova_service_status', 'arch']
        vms = Gauge('hypervisor_running_vms', 'Number of running VMs', labels, registry=self.registry)
        vcpus_total = Gauge('hypervisor_vcpus_total', 'Total number of vCPUs', labels, registry=self.registry)
        vcpus_used = Gauge('hypervisor_vcpus_used', 'Number of used vCPUs', labels, registry=self.registry)
        mem_total = Gauge(
            'hypervisor_memory_mbs_total', 'Total amount of memory in MBs', labels, registry=self.registry)
        mem_used = Gauge('hypervisor_memory_mbs_used', 'Used memory in MBs', labels, registry=self.registry)

        def squashnone(val, default=0):
            if val is None:
                return default
            return val

        for h in self.hypervisors:
            host = h['service']['host']
            # log.debug("host: %s", host)
            cpu_info = h['cpu_info']
            # log.debug("cpu_info: %s", cpu_info)
            arch = 'Unknown'
            if not cpu_info:
                log.info("Could not get cpu info")
            elif type(cpu_info) != dict:
                cpu_info = json.loads(cpu_info)
                arch = cpu_info['arch']
            label_values = [
                self.cloud, host, self.aggregate_map.get(host, 'default'), self.services_map[host], arch]
            # Disabled hypervisors return None below, convert to 0
            vms.labels(*label_values).set(squashnone(h['running_vms']))
            vcpus_total.labels(*label_values).set(squashnone(h['vcpus']))
            vcpus_used.labels(*label_values).set(squashnone(h['vcpus_used']))
            mem_total.labels(*label_values).set(squashnone(h['memory_mb']))
            mem_used.labels(*label_values).set(squashnone(h['memory_mb_used']))

    def gen_service_status(self):
        state_labels = ['cloud', 'hostname', 'service', 'state']
        status_labels = ['cloud', 'hostname', 'service', 'status']
        svc_state = Gauge('openstack_compute_service_state', 'OpenStack Compute Service state', state_labels, registry=self.registry)
        svc_status = Gauge('openstack_compute_service_status', 'OpenStack Compute Service status', status_labels, registry=self.registry)

        def squashup(val):
            if val == 'up' or val == 'enabled':
                return 0
            return 1

        for s in self.prodstack['services']:
            host = s['host']
            svc_state.labels(self.cloud, host, s['binary'], s['state']).set(squashup(s['state']))
            svc_status.labels(self.cloud, host, s['binary'], s['status']).set(squashup(s['status']))

    def gen_instance_metadata(self):
        m_labels = ['project', 'course_name', 'env_type', 'platform', 'Purpose', 'Project', 'catalog_item']
        labels = ['cloud']
        labels.extend(m_labels)
        i_meta = Gauge('nova_instances_metadata',
                       'Nova Instances metatada',
                       labels, registry=self.registry)
        for p, k in self.prodstack['metadata'].items():
            g_values = [self.cloud]
            for label in m_labels:
                g_values.append(k[label])
            i_meta.labels(*g_values).inc(1)

    def gen_instance_stats(self):
        missing_flavors = False
        instances = Gauge('nova_instances',
                          'Nova instances metrics',
                          ['cloud', 'tenant', 'instance_state'], registry=self.registry)
        res_ram = Gauge('nova_resources_ram_mbs',
                        'Nova RAM usage metric',
                        ['cloud', 'tenant'], registry=self.registry)
        res_vcpus = Gauge('nova_resources_vcpus',
                          'Nova vCPU usage metric',
                          ['cloud', 'tenant'], registry=self.registry)
        res_disk = Gauge('nova_resources_disk_gbs',
                         'Nova disk usage metric',
                         ['cloud', 'tenant'], registry=self.registry)
        for i in self.prodstack['instances']:
            if i['project_id'] in self.tenant_map:
                tenant = self.tenant_map[i['project_id']]
            else:
                tenant = 'orphaned'
            instances.labels(self.cloud, tenant, i['status']).inc()

            if i['flavor']['id'] in self.flavor_map:
                flavor = self.flavor_map[i['flavor']['id']]
                res_ram.labels(self.cloud, tenant).inc(flavor['ram'])
                res_vcpus.labels(self.cloud, tenant).inc(flavor['vcpus'])
                res_disk.labels(self.cloud, tenant).inc(flavor['disk'])
            else:
                missing_flavors = True

        # If flavors were deleted we can't reliably find out resource use
        if missing_flavors:
            self.registry.unregister(res_ram)
            self.registry.unregister(res_vcpus)
            self.registry.unregister(res_disk)
            res_ram = Gauge('nova_resources_ram_mbs', 'Nova RAM usage metric unavailable, missing flavors',
                            [], registry=self.registry)
            res_vcpus = Gauge('nova_resources_vcpus', 'Nova vCPU usage metric unavailable, missing flavors',
                              [], registry=self.registry)
            res_disk = Gauge('nova_resources_disk_gbs', 'Nova disk usage metric unavailable, missing flavors',
                             [], registry=self.registry)

    def gen_quota_stats(self):
        cores = Gauge('nova_quota_cores',
                      'Nova cores metric',
                      ['cloud', 'tenant', 'type'], registry=self.registry)
        fips = Gauge('nova_quota_floating_ips',
                     'Nova floating IP addresses (number)',
                     ['cloud', 'tenant', 'type'], registry=self.registry)
        inst = Gauge('nova_quota_instances',
                     'Nova instances (number)',
                     ['cloud', 'tenant', 'type'], registry=self.registry)
        ram = Gauge('nova_quota_ram_mbs',
                    'Nova RAM (MB)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        sgrp = Gauge('nova_quota_server_groups',
                    'Nova server groups (number)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        sec = Gauge('nova_quota_security_groups',
                    'Nova security groups (number)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        secr = Gauge('nova_quota_security_group_rules',
                    'Nova security group rules (number)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)
        key = Gauge('nova_quota_keypairs',
                    'Nova keypair (number)',
                    ['cloud', 'tenant', 'type'], registry=self.registry)

        for t, q in self.prodstack['nova_quotas'].items():
            if t in self.tenant_map:
                tenant = self.tenant_map[t]
            else:
                tenant = 'orphaned'

            # we get detailed quota information only on recent OS versions
            if isinstance(q['cores'], int):
                cores.labels(self.cloud, tenant, 'limit').set(q['cores'])
                fips.labels(self.cloud, tenant, 'limit').set(q['floating_ips'])
                inst.labels(self.cloud, tenant, 'limit').set(q['instances'])
                ram.labels(self.cloud, tenant, 'limit').set(q['ram'])
                sgrp.labels(self.cloud, tenant, 'limit').set(q['server_groups'])
                sec.labels(self.cloud, tenant, 'limit').set(q['security_groups'])
                secr.labels(self.cloud, tenant, 'limit').set(q['security_group_rules'])
                key.labels(self.cloud, tenant, 'limit').set(q['key_pairs'])
            else:
                for tt in ['limit', 'in_use', 'reserved']:
                    cores.labels(self.cloud, tenant, tt).inc(q['cores'][tt])
                    fips.labels(self.cloud, tenant, tt).inc(q['floating_ips'][tt])
                    inst.labels(self.cloud, tenant, tt).inc(q['instances'][tt])
                    ram.labels(self.cloud, tenant, tt).inc(q['ram'][tt])
                    sgrp.labels(self.cloud, tenant, tt).inc(q['server_groups'][tt])
                    sec.labels(self.cloud, tenant, tt).inc(q['security_groups'][tt])
                    secr.labels(self.cloud, tenant, tt).inc(q['security_group_rules'][tt])
                    key.labels(self.cloud, tenant, tt).inc(q['key_pairs'][tt])

    def get_stats(self, cloud):
        log.debug("get_stats")
        self.cloud = cloud
        self.gen_service_status()
        self.gen_hypervisor_stats()
        self.gen_instance_stats()
        self.gen_quota_stats()
        self.gen_instance_metadata()
        return generate_latest(self.registry)


class Swift():
    def __init__(self):
        self.registry = CollectorRegistry()
        self.baseurl = 'http://{}:6000/recon/{}'
        self.swift_hosts = config.get('swift_hosts', [])

    def gen_up_stats(self):
        labels = ['cloud', 'hostname']
        swift_up = Gauge('swift_host_up', 'Swift host reachability',
                         labels, registry=self.registry)
        for h in self.swift_hosts:
            try:
                requests.get(self.baseurl.format(h, 'diskusage'))
                swift_up.labels(self.cloud, h).set(1)
            except requests.exceptions.RequestException:
                swift_up.labels(self.cloud, h).set(0)

    def gen_disk_usage_stats(self):
        labels = ['cloud', 'hostname', 'device', 'type']
        swift_disk = Gauge('swift_disk_usage_bytes', 'Swift disk usage in bytes',
                           labels, registry=self.registry)
        for h in self.swift_hosts:
            try:
                r = requests.get(self.baseurl.format(h, 'diskusage'))
            except requests.exceptions.RequestException:
                continue
            for disk in r.json():
                if not all([disk.get(i, False) for i in ['size', 'used', 'device']]):
                    continue
                swift_disk.labels(self.cloud, h, disk['device'], 'size').set(int(disk['size']))
                swift_disk.labels(self.cloud, h, disk['device'], 'used').set(int(disk['used']))

    def gen_quarantine_stats(self):
        labels = ['cloud', 'hostname', 'ring']
        swift_quarantine = Gauge('swift_quarantined_objects', 'Number of quarantined objects',
                                 labels, registry=self.registry)
        for h in self.swift_hosts:
            try:
                r = requests.get(self.baseurl.format(h, 'quarantined'))
            except requests.exceptions.RequestException:
                continue
            for ring in ['accounts', 'objects', 'containers']:
                swift_quarantine.labels(self.cloud, h, ring).set(r.json().get(ring))

    def _get_object_ring_replication_stats(self, h, swift_repl_duration):
        # Object replication is special
        try:
            r = requests.get(self.baseurl.format(h, 'replication/object'))
        except requests.exceptions.RequestException:
            return
        try:
            swift_repl_duration.labels(self.cloud, h, 'object').set(r.json()['object_replication_time'])
        except TypeError:
            print(traceback.format_exc())

    def _get_ring_replication_stats(self, ring, h, swift_repl_duration, swift_repl):
        metrics = ['attempted', 'diff', 'diff_capped', 'empty',
                   'failure', 'hashmatch', 'no_change', 'remote_merge',
                   'remove', 'rsync', 'success', 'ts_repl']
        try:
            r = requests.get(self.baseurl.format(h, 'replication/' + ring))
        except requests.exceptions.RequestException:
            return
        try:
            swift_repl_duration.labels(self.cloud, h, ring).set(r.json()['replication_time'])
        except TypeError:
            print(traceback.format_exc())

        for metric in metrics:
            try:
                swift_repl.labels(self.cloud, h, ring, metric).set(r.json()['replication_stats'][metric])
            except TypeError:
                print(traceback.format_exc())

    def gen_replication_stats(self):
        labels = ['cloud', 'hostname', 'ring', 'type']
        swift_repl = Gauge('swift_replication_stats', 'Swift replication stats', labels, registry=self.registry)
        labels = ['cloud', 'hostname', 'ring']
        swift_repl_duration = Gauge('swift_replication_duration_seconds', 'Swift replication duration in seconds',
                                    labels, registry=self.registry)
        for h in self.swift_hosts:
            self._get_object_ring_replication_stats(h, swift_repl_duration)
            for ring in ['account', 'container']:
                self._get_ring_replication_stats(ring, h, swift_repl_duration, swift_repl)

    def get_stats(self):
        self.gen_up_stats()
        self.gen_disk_usage_stats()
        self.gen_quarantine_stats()
        self.gen_replication_stats()
        return generate_latest(self.registry)


class SwiftAccountUsage():
    def __init__(self):
        self.registry = CollectorRegistry()

        self.hash_path_prefix = config.get('hash_path_prefix', None)
        if self.hash_path_prefix:
            swift.common.utils.HASH_PATH_PREFIX = self.hash_path_prefix
        self.hash_path_suffix = config.get('hash_path_suffix', None)
        if self.hash_path_suffix:
            swift.common.utils.HASH_PATH_SUFFIX = self.hash_path_suffix

        self.reseller_prefix = config.get('reseller_prefix', 'AUTH_')
        self.ring_path = config.get('ring_path', '/etc/swift')

        try:
            self.account_ring = self._get_account_ring()
        except SystemExit:
            # Most likely raised by swift.common.utils.validate_configuration().
            raise Exception(
                "Is swift.conf readable or at least one hash path variable configured?")

    def _read_keystone_tenants_map(self, map_path):
        if not map_path:
            return {}

        m = {}
        with open(map_path) as km:
            line = km.readline()
            while line != '':
                name, id = line.strip().split()
                m[name] = id
                line = km.readline()

        return m

    def _get_account_ring(self):
        """Read the account ring from the configured location, and return it."""
        return Ring(
            serialized_path=self.ring_path,
            ring_name='account',
            )

    def _get_account_usage(self, account):
        partition, nodes = self.account_ring.get_nodes(account=account)
        node = random.choice(nodes)
        account_url = 'http://{ip}:{port}/{device}/{partition}/{account}'.format(
            account=account,
            partition=partition,
            **node)
        response = requests.head(account_url)
        if response.status_code == 204:
            return int(response.headers['X-Account-Bytes-Used'])
        else:
            return 0

    def gen_account_stats(self):
        self.keystone_tenants_map = self._read_keystone_tenants_map(
            config.get('keystone_tenants_map', None))
        labels = ['cloud', 'swift_account', 'tenant']
        swift_account = Gauge(
            'swift_account_bytes_used', 'Swift account usage in bytes', labels, registry=self.registry)

        for tenant_name, tenant_id in self.keystone_tenants_map.iteritems():
            account = self.reseller_prefix + tenant_id
            bytes_used = self._get_account_usage(account)

            swift_account.labels(self.cloud, account, tenant_name).set(bytes_used)

    def get_stats(self):
        self.gen_account_stats()
        return generate_latest(self.registry)


class ForkingHTTPServer(ForkingMixIn, HTTPServer):
    pass


# This could perhaps be cleverer, but surely not simpler.
COLLECTORS = {
    'cinder': Cinder,
    'neutron': Neutron,
    'nova': Nova,
    'heat': Heat,
    'swift': Swift,
    'swift-account-usage': SwiftAccountUsage,
    }

DATA_GATHERER_USERS = [
    'cinder',
    'neutron',
    'nova',
    'heat'
    ]


def get_collectors(collectors):
    # For backwards compatibility and when enabled_collectors isn't defined,
    # specify default set of collectors before commit 662b70f and f27cda8.
    # https://github.com/CanonicalLtd/prometheus-openstack-exporter/issues/80
    if not collectors:
        return ['cinder', 'swift', 'nova', 'neutron', 'heat']
    return collectors


def data_gatherer_needed(config):
    return set(get_collectors(config.get('enabled_collectors'))).intersection(DATA_GATHERER_USERS)


class OpenstackExporterHandler(BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        BaseHTTPRequestHandler.__init__(self, *args, **kwargs)

    def do_GET(self):
        url = urlparse.urlparse(self.path)
        if url.path == '/metrics':
            try:

                clouds = get_clouds(config['config_dir'])
                collectors = {}
                output = ''
                for cloud in clouds:
                    if not path.isfile(config['cache_file']+'-'+cloud):
                        continue
                    collectors[cloud] = [COLLECTORS[collector](cloud) for collector in get_collectors(config.get('enabled_collectors'))]
                    log.debug("Collecting stats..")
                    for collector in collectors[cloud]:
                        output += collector.get_stats(cloud)
                    if data_gatherer:
                        output += data_gatherer[cloud].get_stats()

                self.send_response(200)
                self.send_header('Content-Type', CONTENT_TYPE_LATEST)
                self.end_headers()
                self.wfile.write(output)
            except Exception:
                self.send_response(500)
                self.end_headers()
                self.wfile.write(traceback.format_exc())
        elif url.path == '/':
            self.send_response(200)
            self.end_headers()
            self.wfile.write("""<html>
            <head><title>OpenStack Exporter</title></head>
            <body>
            <h1>OpenStack Exporter</h1>
            <p>Visit <code>/metrics</code> to use.</p>
            </body>
            </html>""")
        else:
            self.send_response(404)
            self.end_headers()


def handler(*args, **kwargs):
    OpenstackExporterHandler(*args, **kwargs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage=__doc__,
                                     description='Prometheus OpenStack exporter',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('config_file', nargs='?',
                        help='Configuration file path',
                        default='/etc/openstack-exporter/openstack-exporter.yaml',
                        type=argparse.FileType('r'))
    args = parser.parse_args()
    log.setLevel(logging.DEBUG)
    for logsock in ('/dev/log', '/var/run/syslog'):
        if path.exists(logsock):
            log.addHandler(logging.handlers.SysLogHandler(address=logsock))
    else:
        log.addHandler(logging.StreamHandler())
    config = yaml.safe_load(args.config_file.read())
    config_dir = config.get('config_dir')
    if config_dir is None:
        config_dir = '/etc/openstack-exporter'
    clouds = get_clouds(config_dir)
    if clouds is None:
        log.error("Can't get cloud list. Check you clouds.yaml file")
    else:
        numeric_log_level = getattr(logging, config.get('log_level').upper(), None)
        if not isinstance(numeric_log_level, int):
            raise ValueError('Invalid log level: %s' % config.get('log_level'))
        log.setLevel(numeric_log_level)
        data_gatherer = {}
        if data_gatherer_needed(config):
            for cloud in clouds:
                data_gatherer[cloud] = DataGatherer(cloud)
                data_gatherer[cloud].start()
        server = ForkingHTTPServer(('', config.get('listen_port')), handler)
        server.serve_forever()
